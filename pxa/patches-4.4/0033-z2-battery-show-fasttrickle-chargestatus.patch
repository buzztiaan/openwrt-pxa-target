Index: linux-4.4.7/drivers/power/z2_battery.c
===================================================================
--- linux-4.4.7.orig/drivers/power/z2_battery.c
+++ linux-4.4.7/drivers/power/z2_battery.c
@@ -25,6 +25,7 @@
 struct z2_charger {
        struct z2_battery_info          *info;
        int                             bat_status;
+       int                             chrg_status;
        struct i2c_client               *client;
        struct power_supply             *batt_ps;
        struct power_supply_desc        batt_ps_desc;
@@ -78,6 +79,9 @@ static int z2_batt_get_property(struct p
        case POWER_SUPPLY_PROP_PRESENT:
                val->intval = 1;
                break;
+       case POWER_SUPPLY_PROP_CHARGE_TYPE:
+               val->intval = charger->chrg_status;
+               break;
        default:
                return -EINVAL;
        }
@@ -107,15 +111,19 @@ static void z2_batt_update(struct z2_cha
 
                if (val1 == 0 && val2 == 0){
                        charger->bat_status = POWER_SUPPLY_STATUS_CHARGING;
+                       charger->chrg_status = POWER_SUPPLY_CHARGE_TYPE_TRICKLE;
                }
                else if (val1 == 0 && val2 == 1){
                        charger->bat_status = POWER_SUPPLY_STATUS_CHARGING;
+                       charger->chrg_status = POWER_SUPPLY_CHARGE_TYPE_FAST;
                }
                else if (val1 == 1 && val2 == 0){
                        charger->bat_status = POWER_SUPPLY_STATUS_FULL;
+                       charger->chrg_status = POWER_SUPPLY_CHARGE_TYPE_NONE;
                }
                else{
                        charger->bat_status = POWER_SUPPLY_STATUS_DISCHARGING;
+                       charger->chrg_status = POWER_SUPPLY_CHARGE_TYPE_NONE;
                }
        }
 
@@ -159,6 +167,8 @@ static int z2_batt_ps_init(struct z2_cha
                props++;        /* POWER_SUPPLY_PROP_VOLTAGE_MAX */
        if (info->min_voltage >= 0)
                props++;        /* POWER_SUPPLY_PROP_VOLTAGE_MIN */
+       if (charger->chrg_status >= 0)
+               props++;        /* POWER_SUPPLY_PROP_CHARGE_TYPE */
 
        prop = kzalloc(props * sizeof(*prop), GFP_KERNEL);
        if (!prop)
@@ -175,6 +185,8 @@ static int z2_batt_ps_init(struct z2_cha
                prop[i++] = POWER_SUPPLY_PROP_VOLTAGE_MAX;
        if (info->min_voltage >= 0)
                prop[i++] = POWER_SUPPLY_PROP_VOLTAGE_MIN;
+       if (charger->chrg_status >= 0)
+               prop[i++] = POWER_SUPPLY_PROP_CHARGE_TYPE;
 
        if (!info->batt_name) {
                dev_info(&charger->client->dev,
@@ -243,6 +255,7 @@ static int z2_batt_probe(struct i2c_clie
                return -ENOMEM;
 
        charger->bat_status = POWER_SUPPLY_STATUS_UNKNOWN;
+       charger->chrg_status = POWER_SUPPLY_CHARGE_TYPE_UNKNOWN;
        charger->info = info;
        charger->client = client;
        i2c_set_clientdata(client, charger);
